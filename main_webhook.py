import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BotCommand, Update,
)

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing")

GUIDE_URL   = os.getenv("GUIDE_URL", "https://drive.google.com/file/d/1ET0CazmAbpAR6ms8r-93krMY_EBScdqU/view?usp=sharing")
CONTACT_URL = os.getenv("CONTACT_URL", "https://t.me/itella")
WELCOME_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"

bot = Bot(BOT_TOKEN)
dp  = Dispatcher()

def reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ")],
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def inline_both() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥ (PDF)", url=GUIDE_URL)],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å @itella", url=CONTACT_URL)],
    ])

def inline_for_guide() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥ (PDF)", url=GUIDE_URL)]
    ])

def inline_for_contact() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å @itella", url=CONTACT_URL)]
    ])

async def set_commands():
    try:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏"),
            BotCommand(command="restore", description="–í–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É"),
            BotCommand(command="help", description="–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"),
        ])
    except Exception as e:
        print("[warn] set_my_commands:", e)

async def h_start(message: Message):
    await message.answer(WELCOME_TEXT, reply_markup=reply_kb())
    await message.answer("–í–∞—à –≥–∞–π–¥ –∏ –±—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∏–∂–µ:", reply_markup=inline_both())

async def h_restore(message: Message):
    await message.answer("–ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã üëá", reply_markup=reply_kb())

async def h_help(message: Message):
    txt = (
        "–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –¥–≤–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ:\n"
        "‚Ä¢ ¬´–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ¬ª ‚Äî –ø—Ä–∏—à–ª—é –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ PDF\n"
        "‚Ä¢ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è¬ª ‚Äî –ø—Ä–∏—à–ª—é –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç\n\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø–∞–ª–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /restore."
    )
    await message.answer(txt, reply_markup=reply_kb())

async def h_get_guide(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥:", reply_markup=inline_for_guide())

async def h_contact(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ:", reply_markup=inline_for_contact())

async def h_any(message: Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ üëá", reply_markup=reply_kb())

dp.message.register(h_start,    CommandStart())
dp.message.register(h_restore,  Command("restore"))
dp.message.register(h_help,     Command("help"))
dp.message.register(h_get_guide, F.text == "–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ")
dp.message.register(h_contact,   F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è")
dp.message.register(h_any)

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    await set_commands()

@app.get("/")
async def health():
    return {"ok": True}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
