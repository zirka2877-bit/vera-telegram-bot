import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)

# === LINKS ===
GUIDE_URL = os.getenv(
    "GUIDE_URL",
    "https://drive.google.com/file/d/1ET0CazmAbpAR6ms8r-93krMY_EBScdqU/view?usp=sharing",
)
CONTACT_URL = os.getenv("CONTACT_URL", "https://t.me/itella")

WELCOME_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"

# === Keyboards ===
def reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ")],
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def inline_both() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥ (PDF)", url=GUIDE_URL)],
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å @itella", url=CONTACT_URL)],
        ]
    )

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏"),
        BotCommand(command="restore", description="–í–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É"),
        BotCommand(command="help", description="–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"),
    ]
    try:
        await asyncio.wait_for(bot.set_my_commands(commands), timeout=5)
    except Exception as e:
        print(f"[warn] skip set_my_commands: {e}")

# === Handlers ===
async def on_start(message: Message):
    await message.answer(WELCOME_TEXT, reply_markup=reply_kb())
    await message.answer("–í–∞—à –≥–∞–π–¥ –∏ –±—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∏–∂–µ:", reply_markup=inline_both())

async def on_restore(message: Message):
    await message.answer("–ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã üëá", reply_markup=reply_kb())

async def on_help(message: Message):
    txt = (
        "–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –¥–≤–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.\n\n"
        "‚Ä¢ ¬´–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ¬ª ‚Äî –ø—Ä–∏—à–ª—é –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ PDF\n"
        "‚Ä¢ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è¬ª ‚Äî –ø—Ä–∏—à–ª—é –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç\n\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø–∞–ª–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /restore."
    )
    await message.answer(txt, reply_markup=reply_kb())

async def on_get_guide(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥ (PDF)", url=GUIDE_URL)]]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥:", reply_markup=kb)

async def on_contact(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å @itella", url=CONTACT_URL)]]
    )
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ:", reply_markup=kb)

# –õ–æ–≤–∏–º –ª—é–±–æ–µ –∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def on_any(message: Message):
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ üëá", reply_markup=reply_kb())

# === Entry point ===
async def main():
    token = (os.getenv("BOT_TOKEN") or "").strip()
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    bot = Bot(token=token)
    dp = Dispatcher()

    dp.message.register(on_start, CommandStart())
    dp.message.register(on_restore, Command("restore"))
    dp.message.register(on_help, Command("help"))
    dp.message.register(on_get_guide, F.text == "–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üéÅ")
    dp.message.register(on_contact, F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π üìû‚úçÔ∏è")
    dp.message.register(on_any)  # –ø–æ—Å–ª–µ–¥–Ω–∏–º ‚Äî –ª–æ–≤–∏—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ

    # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–µ—Ç—å ¬´–ø–æ–¥–≤–∏—Å–Ω–µ—Ç¬ª
    asyncio.create_task(set_commands(bot))

    print("Bot is running (long polling).")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
